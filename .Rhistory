if(!require(ISLR)) { install.packages("ISLR", repos = "http://cran.us.r-project.org"); library(ISLR) }
library(ISLR)
library(ggplot2)
library(tidyverse)
library(MASS)
Weekly.train <- Weekly.train %>%
mutate(lag_avg = (Lag1 + Lag2 + Lag3 + Lag4 + Lag5)/5)
Weekly.train <- Weekly[Weekly$Year <= 2008,]
Weekly.test <- Weekly[Weekly$Year > 2008,]
Weekly.train <- Weekly.train %>%
mutate(lag_avg = (Lag1 + Lag2 + Lag3 + Lag4 + Lag5)/5)
Weekly.test <- Weekly.test %>%
mutate(lag_avg = (Lag1 + Lag2 + Lag3 + Lag4 + Lag5)/5)
best.fit <- glm(Direction  ~ lag_avg, data = Weekly.train, family=binomial)
best.probs=predict(best.fit, newdata = Weekly.test, type="response")
best.pred=rep("Down",nrow(Weekly.test))
best.pred[best.probs >.5]="Up"
table(best.pred,Weekly.test$Direction)
mean(best.pred == Weekly.test$Direction)
best.fit <- glm(Direction  ~ Lag2 + lag_avg, data = Weekly.train, family=binomial)
best.probs=predict(best.fit, newdata = Weekly.test, type="response")
best.pred=rep("Down",nrow(Weekly.test))
best.pred[best.probs >.5]="Up"
table(best.pred,Weekly.test$Direction)
mean(best.pred == Weekly.test$Direction)
best.fit <- glm(Direction  ~ Volume*Lag1 + Lag2 + lag_avg, data = Weekly.train, family=binomial)
best.probs=predict(best.fit, newdata = Weekly.test, type="response")
best.pred=rep("Down",nrow(Weekly.test))
best.pred[best.probs >.5]="Up"
table(best.pred,Weekly.test$Direction)
mean(best.pred == Weekly.test$Direction)
best.fit <- glm(Direction  ~ Lag2 + lag_avg, data = Weekly.train, family=binomial)
best.probs=predict(best.fit, newdata = Weekly.test, type="response")
best.pred=rep("Down",nrow(Weekly.test))
best.pred[best.probs >.5]="Up"
table(best.pred,Weekly.test$Direction)
mean(best.pred == Weekly.test$Direction)
Auto$mpg01 <- (Auto$mpg > median(Auto$mpg))
par(mfrow=c(2,2))
ggplot(Auto) + geom_boxplot(mapping = aes(x = factor(cylinders), y = mpg))
ggplot(Auto) + geom_point(mapping = aes(x = horsepower, y = acceleration, col=mpg01))
ggplot(Auto) + geom_point(mapping = aes(x = weight, y = displacement, col=mpg01))
ggplot(data = Auto) + geom_bar(mapping = aes(x = factor(year), fill = factor(mpg01)))
par(mfrow=c(1,1))
table(Auto$origin, Auto$mpg01)
Auto$year80 <- (Auto$year >= 80)
set.seed(1)
train <- sample(1:nrow(Auto), floor(nrow(Auto)*0.75))
Auto.train <- Auto[train,]
Auto.test <- Auto[-train,]
lda.fit=lda(mpg01 ~ horsepower + displacement + factor(origin) + year80 + factor(cylinders), data=Auto.train)
lda.probs=predict(lda.fit, newdata = Auto.test, type="response")
table(lda.probs$class,Auto.test$mpg01)
lda.error <- mean(lda.probs$class == Auto.test$mpg01)
install.packages("tinytex")
plot1 <- ggplot(Auto) + geom_boxplot(mapping = aes(x = factor(cylinders), y = mpg))
plot2 <- ggplot(Auto) + geom_point(mapping = aes(x = horsepower, y = acceleration, col=mpg01))
plot3 <- ggplot(Auto) + geom_point(mapping = aes(x = weight, y = displacement, col=mpg01))
plot4 <- ggplot(data = Auto) + geom_bar(mapping = aes(x = factor(year), fill = factor(mpg01)))
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
library(grid)
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
library(gridExtra)
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
?table
table(Auto$origin, Auto$mpg01, dnn = c("Cylinders", "test"))
table(Auto$origin, Auto$mpg01, dnn = c("Cylinders", "MPG > median"))
table(Auto$origin, Auto$mpg01, dnn = c("Origin", "MPG > median"))
plot1 <- ggplot(Auto) + geom_boxplot(mapping = aes(x = factor(cylinders), y = mpg))
plot2 <- ggplot(Auto) + geom_point(mapping = aes(x = horsepower, y = acceleration, col=mpg01))
plot3 <- ggplot(Auto) + geom_point(mapping = aes(x = weight, y = displacement, col=mpg01))
plot4 <- ggplot(data = Auto) + geom_bar(mapping = aes(x = factor(year), fill = mpg01))
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
plot2 <- ggplot(Auto) + geom_point(mapping = aes(x = horsepower, y = acceleration, col=mpg01)) +scale_fill_grey()
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
plot2 <- ggplot(Auto) + geom_point(mapping = aes(x = horsepower, y = acceleration, col=mpg01)) + theme_bw()
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
plot4 <- ggplot(data = Auto) + geom_bar(mapping = aes(x = factor(year), fill = mpg01)) + scale_fill_grey()
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
plot1 <- ggplot(Auto) + geom_boxplot(mapping = aes(x = factor(cylinders), y = mpg))
plot2 <- ggplot(Auto) + geom_point(mapping = aes(x = horsepower, y = acceleration, col=mpg01)) + scale_colour_grey
plot2 <- ggplot(Auto) + geom_point(mapping = aes(x = horsepower, y = acceleration, col=mpg01)) + scale_color_grey
plot2 <- ggplot(Auto) + geom_point(mapping = aes(x = horsepower, y = acceleration, col=mpg01)) + scale_color_grey()
plot3 <- ggplot(Auto) + geom_point(mapping = aes(x = weight, y = displacement, col=mpg01)) + scale_colour_grey()
plot4 <- ggplot(data = Auto) + geom_bar(mapping = aes(x = factor(year), fill = mpg01)) + scale_fill_grey()
grid.arrange(plot1, plot2, plot3, plot4, ncol = 2)
setwd("/Users/michaelbostwick/Documents/Galapagos")
library(tidyverse)
library(ggplot2)
library(readxl)
library(glmnet)
library(mpath)
library(reshape2)
library(gridExtra)
library(leaps)
library(bestsubset)
source("modeling.function.R")
load("BASES_CENSO_UPA_spss/clean_data.RData")
vars <-  read_excel("Variables.xlsx", sheet = "vars", range = "C2:I241")
production_include <- vars[which(is.na(vars$`UPA Production`)),1]$`Variable Name`
production_x.df <- subset(reduced_data[reduced_data$productivity > 0,], select = production_include)
log_productivity <- log10(reduced_data[reduced_data$productivity > 0, 'productivity'])
zero_prod <- reduced_data[reduced_data$productivity ==0,]
summary(zero_prod$netincome)
par(mfrow = c(2,1))
raw_prod_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = productivity))
log_prod_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = log10(productivity)))
lower_prod_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = productivity)) +
xlim(0, 10000) + xlab("productivity (0-10,000)")
pdf("Paper/images/production_histograms.pdf",width=12,height=8)
grid.arrange(raw_prod_hist, lower_prod_hist, log_prod_hist, nrow = 1)
dev.off()
production.models <- fit.models(model.name = "production", x.data = production_x.df,
y.response = log_productivity, response.family = "gaussian")
setwd("/Users/michaelbostwick/Documents/Galapagos")
library(tidyverse)
library(ggplot2)
library(readxl)
library(glmnet)
library(mpath)
library(reshape2)
library(gridExtra)
library(leaps)
library(bestsubset)
source("modeling.function.R")
load("BASES_CENSO_UPA_spss/clean_data.RData")
vars <-  read_excel("Variables.xlsx", sheet = "vars", range = "C2:I241")
production_include <- vars[which(is.na(vars$`UPA Production`)),1]$`Variable Name`
production_x.df <- subset(reduced_data[reduced_data$productivity > 0,], select = production_include)
log_productivity <- log10(reduced_data[reduced_data$productivity > 0, 'productivity'])
zero_prod <- reduced_data[reduced_data$productivity ==0,]
summary(zero_prod$netincome)
par(mfrow = c(2,1))
raw_prod_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = productivity))
log_prod_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = log10(productivity)))
lower_prod_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = productivity)) +
xlim(0, 10000) + xlab("productivity (0-10,000)")
pdf("Paper/images/production_histograms.pdf",width=12,height=8)
grid.arrange(raw_prod_hist, lower_prod_hist, log_prod_hist, nrow = 1)
dev.off()
production.models <- fit.models(model.name = "production", x.data = production_x.df,
y.response = log_productivity, response.family = "gaussian")
# For testing
x.data <- production_x.df
y.response <- log_productivity
response.family <- "gaussian"
x.matrix <- model.matrix(~., x.data)[,-1]
# Elastic net modeling
set.seed(1)
foldid=sample(1:10,size=length(y.response),replace=TRUE)
cv1=cv.glmnet(x.matrix,y.response,family=response.family,foldid=foldid,alpha=1)
cv.75=cv.glmnet(x.matrix,y.response,family=response.family,foldid=foldid,alpha=0.75)
cv.5=cv.glmnet(x.matrix,y.response,family=response.family,foldid=foldid,alpha=.5)
cv.25=cv.glmnet(x.matrix,y.response,family=response.family,foldid=foldid,alpha=0.25)
models <- vector(mode="list", length=4)
models[[1]] <- cv.25
models[[2]] <- cv.5
models[[3]] <- cv.75
models[[4]] <- cv1
alphas <- c(0.25,0.5,0.75,1)
cv1.mse <- cv1$cvm[cv1$lambda == cv1$lambda.1se]
cv.75.mse <- cv.75$cvm[cv.75$lambda == cv.75$lambda.1se]
cv.5.mse <- cv.5$cvm[cv.5$lambda == cv.5$lambda.1se]
cv.25.mse <- cv.25$cvm[cv.25$lambda == cv.25$lambda.1se]
mses <- c(cv.25.mse, cv.5.mse, cv.75.mse, cv1.mse)
best_model <- models[[which.min(mses)]]
best_alpha <- alphas[which.min(mses)]
elastic.full <- glmnet(x.matrix,y.response,family=response.family,alpha=best_alpha)
#lambda.seq <- c(seq(1, 0.64, by=-0.05), elastic.nvars$lambda)
#elastic.nvars <- glmnet(x.matrix,y.response,family=response.family,alpha=best_alpha, lambda = lambda.seq)
elastic.full$df
found_df = FALSE
df = 6
while (found_df == FALSE){
if (length(elastic.full$lambda[elastic.full$df == df]) > 0){
lambda.10var <- elastic.full$lambda[elastic.full$df == df]
found_df = TRUE
} else {
df = df + 1
}
}
elastic.coef10 <- coef(elastic.full,s=lambda.10var)[1:ncol(x.matrix),]
elastic.coef10.nonzero <- elastic.coef10[elastic.coef10!=0][2:6]
elastic10.names <- names(elastic.coef10.nonzero)
elastic.coef10 <- coef(elastic.full,s=lambda.10var[1])[1:ncol(x.matrix),]
elastic.coef10.nonzero <- elastic.coef10[elastic.coef10!=0][2:6]
elastic10.names <- names(elastic.coef10.nonzero)
setwd("/Users/michaelbostwick/Documents/Galapagos")
library(tidyverse)
library(ggplot2)
library(readxl)
library(glmnet)
library(mpath)
library(reshape2)
library(gridExtra)
library(leaps)
library(bestsubset)
source("modeling.function.R")
load("BASES_CENSO_UPA_spss/clean_data.RData")
vars <-  read_excel("Variables.xlsx", sheet = "vars", range = "C2:I241")
production_include <- vars[which(is.na(vars$`UPA Production`)),1]$`Variable Name`
production_x.df <- subset(reduced_data[reduced_data$productivity > 0,], select = production_include)
log_productivity <- log10(reduced_data[reduced_data$productivity > 0, 'productivity'])
zero_prod <- reduced_data[reduced_data$productivity ==0,]
summary(zero_prod$netincome)
par(mfrow = c(2,1))
raw_prod_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = productivity))
log_prod_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = log10(productivity)))
lower_prod_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = productivity)) +
xlim(0, 10000) + xlab("productivity (0-10,000)")
pdf("Paper/images/production_histograms.pdf",width=12,height=8)
grid.arrange(raw_prod_hist, lower_prod_hist, log_prod_hist, nrow = 1)
dev.off()
production.models <- fit.models(model.name = "production", x.data = production_x.df,
y.response = log_productivity, response.family = "gaussian")
par(mfrow=c(2,2))
plot(elastic.predicts, elastic.resids)
qqnorm(elastic.resids)
plot(fwd.predicts, fwd.resids)
qqnorm(fwd.resids)
setwd("/Users/michaelbostwick/Documents/Galapagos")
library(tidyverse)
library(ggplot2)
library(readxl)
library(glmnet)
library(mpath)
library(reshape2)
library(gridExtra)
library(leaps)
library(bestsubset)
source("modeling.function.R")
load("BASES_CENSO_UPA_spss/clean_data.RData")
vars <-  read_excel("Variables.xlsx", sheet = "vars", range = "C2:I241")
netincome_include <- vars[which(is.na(vars$`Net Income`)),1]$`Variable Name`
full_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = netincome))
reduced_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = netincome)) +
scale_x_continuous(limits = c(-5e+04, 5e+04))
pdf("Paper/images/netincome_histograms.pdf",width=12,height=8)
grid.arrange(full_hist, reduced_hist, nrow = 1)
dev.off()
netincome_x.df <- subset(reduced_data[abs(reduced_data$netincome) < 5e+04,], select = netincome_include)
netincome <- reduced_data[abs(reduced_data$netincome) < 5e+04, 'netincome']
netincome.models <- fit.models(model.name = "netincome", x.data = netincome_x.df,
y.response = netincome, response.family = "gaussian")
setwd("/Users/michaelbostwick/Documents/Galapagos")
library(tidyverse)
library(ggplot2)
library(readxl)
library(glmnet)
library(mpath)
library(reshape2)
library(gridExtra)
library(leaps)
library(bestsubset)
source("modeling.function.R")
load("BASES_CENSO_UPA_spss/clean_data.RData")
vars <-  read_excel("Variables.xlsx", sheet = "vars", range = "C2:I241")
production_include <- vars[which(is.na(vars$`UPA Production`)),1]$`Variable Name`
production_x.df <- subset(reduced_data[reduced_data$productivity > 0,], select = production_include)
log_productivity <- log10(reduced_data[reduced_data$productivity > 0, 'productivity'])
# For testing
x.data <- production_x.df
y.response <- log_productivity
response.family <- "gaussian"
x.matrix <- model.matrix(~., x.data)[,-1]
# Elastic net modeling
set.seed(1)
foldid=sample(1:10,size=length(y.response),replace=TRUE)
cv1=cv.glmnet(x.matrix,y.response,family=response.family,foldid=foldid,alpha=1)
cv.75=cv.glmnet(x.matrix,y.response,family=response.family,foldid=foldid,alpha=0.75)
cv.5=cv.glmnet(x.matrix,y.response,family=response.family,foldid=foldid,alpha=.5)
cv.25=cv.glmnet(x.matrix,y.response,family=response.family,foldid=foldid,alpha=0.25)
models <- vector(mode="list", length=4)
models[[1]] <- cv.25
models[[2]] <- cv.5
models[[3]] <- cv.75
models[[4]] <- cv1
alphas <- c(0.25,0.5,0.75,1)
cv1.mse <- cv1$cvm[cv1$lambda == cv1$lambda.1se]
cv.75.mse <- cv.75$cvm[cv.75$lambda == cv.75$lambda.1se]
cv.5.mse <- cv.5$cvm[cv.5$lambda == cv.5$lambda.1se]
cv.25.mse <- cv.25$cvm[cv.25$lambda == cv.25$lambda.1se]
mses <- c(cv.25.mse, cv.5.mse, cv.75.mse, cv1.mse)
best_model <- models[[which.min(mses)]]
best_alpha <- alphas[which.min(mses)]
elastic.full <- glmnet(x.matrix,y.response,family=response.family,alpha=best_alpha)
found_df = FALSE
df = 6
while (found_df == FALSE){
if (length(elastic.full$lambda[elastic.full$df == df]) > 0){
lambda.10var <- elastic.full$lambda[elastic.full$df == df]
found_df = TRUE
} else {
df = df + 1
}
}
elastic.coef10 <- coef(elastic.full,s=lambda.10var[1])[1:ncol(x.matrix),]
elastic.coef10.nonzero <- elastic.coef10[elastic.coef10!=0][2:6]
elastic10.names <- names(elastic.coef10.nonzero)
elastic.coef.best <- coef(elastic.full,s=best_model$lambda.1se)[1:ncol(x.matrix),]
elastic.coef.best.nonzero <- elastic.coef.best[elastic.coef.best!=0]
elastic.best.names <- names(elastic.coef.best.nonzero)
if (best_model$lambda.1se == best_model$lambda[1]){
best.lambda = best_model$lambda.min
} else {
best.lambda = best_model$lambda.1se
}
elastic.predicts <- predict(elastic.full, newx = x.matrix,  type = "response", s = best.lambda)
elastic.resids <- (y.response - elastic.predicts)
set.seed(1)
bootstrap_coefs <- data.frame(matrix(ncol = ncol(x.matrix)+1, nrow = 0))
colnames(bootstrap_coefs) <- c("(Intercept)", colnames(x.matrix))
for (i in 1:1000){
bootstrap_samples <- sample(1:nrow(x.matrix), size = nrow(x.matrix), replace = TRUE)
weights <- table(factor(bootstrap_samples, levels = 1:nrow(x.matrix)))
bs.elasticnet = glmnet(x.matrix,y.response,weights = weights,alpha=best_alpha, lambda = best.lambda)
bs.coef <- t(data.frame(predict(bs.elasticnet,type="coefficients",s=best.lambda)[1:(ncol(x.matrix)+1),]))
bootstrap_coefs <- rbind(bootstrap_coefs, bs.coef)
}
row.names(bootstrap_coefs) <- c(seq(1:1000))
View(bootstrap_coefs)
elastic10.names
best.fwd <- regsubsets(y.response~., data=x.data ,nvmax=200,method = "forward")
best.fwd.summary <- summary(best.fwd)
fwd.coefs <- coef(best.fwd, which.min(best.fwd.summary$bic))
incl_vars <- names(fwd.coefs)[-1]
incl_x <- x.matrix[,incl_vars]
fwd.predicts <- incl_x %*% fwd.coefs[-1] + fwd.coefs[1]
fwd.resids <- (y.response - fwd.predicts)
fwd.coefs10 <- colnames(x.matrix)[best.fwd$vorder[2:6]]
top.names <- c(elastic10.names, fwd.coefs)
top.names
top.names <- c(elastic10.names, names(fwd.coefs))
top.names
top.names <- c(elastic10.names, fwd.coefs10)
top.names
top.names <- unique(c(elastic10.names, fwd.coefs10))
top.names
ggplot(data = melt(bs_coefs[,top.names]), aes(x=variable, y=value)) + geom_boxplot() + coord_flip()
ggplot(data = melt(bootstrap_coefs[,top.names]), aes(x=variable, y=value)) + geom_boxplot() + coord_flip()
pct_zeroes <- data.frame(colSums(bootstrap_coefs != 0)/nrow(bootstrap_coefs))
pct_zeroes <- rownames_to_column(pct_zeroes)
colnames(pct_zeroes) <- c("variable", "pct_zero")
ggplot(pct_zeroes[pct_zeroes$pct_zero < .01,]) + geom_bar(stat='identity', aes(x=variable, y=pct_zero)) + coord_flip()
View(pct_zeroes)
ggplot(pct_zeroes[top.names,]) + geom_bar(stat='identity', aes(x=variable, y=pct_zero)) + coord_flip()
top.boostrap <- bootstrap_coefs[top.names,]
ggplot(data = melt(top.boostrap), aes(x=variable, y=value)) + geom_boxplot() + coord_flip()
top.boostrap <- bootstrap_coefs[,top.names]
ggplot(data = melt(top.boostrap), aes(x=variable, y=value)) + geom_boxplot() + coord_flip()
pct_zeroes <- data.frame(colSums(top.boostrap != 0)/nrow(top.boostrap))
pct_zeroes <- rownames_to_column(pct_zeroes)
colnames(pct_zeroes) <- c("variable", "pct_zero")
ggplot(pct_zeroes) + geom_bar(stat='identity', aes(x=variable, y=pct_zero)) + coord_flip()
elastic.coef.best.nonzero
write.csv(elastic.coef.best.nonzero, "elasticbestcoef_production.csv")
elastic.coef.best.nonzero <- as.data.frame(elastic.coef.best.nonzero)
View(elastic.coef.best.nonzero)
fwd.coefs
fwd.coefs <- as.data.frame(fwd.coefs)
View(elastic.coef.best.nonzero)
elastic.coef.best.nonzero <- rownames_to_column(elastic.coef.best.nonzero)
View(elastic.coef.best.nonzero)
fwd.coefs <- rownames_to_column(fwd.coefs)
merged_best_coefs <- outer_join(elastic.coef.best.nonzero, fwd.coefs, by="rowname")
merged_best_coefs <- full_join(elastic.coef.best.nonzero, fwd.coefs, by="rowname")
View(merged_best_coefs)
View(merged_best_coefs)
colnames(merged_best_coefs) <- c("variable", "elastic", "forward")
View(merged_best_coefs)
model.name <- "production"
path <- sprintf("Paper/fullcoeflist_%s.csv", model.name)
write.csv(merged_best_coefs, path)
write.csv(merged_best_coefs, path, row.names = FALSE)
write.csv(merged_best_coefs, path, row.names = FALSE)
merged_best_coefs$variable <- gsub("_", " ", merged_best_coefs$variable)
View(merged_best_coefs)
path <- sprintf("Paper/fullcoeflist_%s.csv", model.name)
write.csv(merged_best_coefs, path, row.names = FALSE)
setwd("/Users/michaelbostwick/Documents/Galapagos")
library(tidyverse)
library(ggplot2)
library(readxl)
library(glmnet)
library(mpath)
library(reshape2)
library(gridExtra)
library(leaps)
library(bestsubset)
source("modeling.function.R")
load("BASES_CENSO_UPA_spss/clean_data.RData")
vars <-  read_excel("Variables.xlsx", sheet = "vars", range = "C2:I241")
netincome_include <- vars[which(is.na(vars$`Net Income`)),1]$`Variable Name`
full_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = netincome))
reduced_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = netincome)) +
scale_x_continuous(limits = c(-5e+04, 5e+04))
pdf("Paper/images/netincome_histograms.pdf",width=12,height=8)
grid.arrange(full_hist, reduced_hist, nrow = 1)
dev.off()
netincome_x.df <- subset(reduced_data[abs(reduced_data$netincome) < 5e+04,], select = netincome_include)
netincome <- reduced_data[abs(reduced_data$netincome) < 5e+04, 'netincome']
netincome.models <- fit.models(model.name = "netincome", x.data = netincome_x.df,
y.response = netincome, response.family = "gaussian")
setwd("/Users/michaelbostwick/Documents/Galapagos")
library(tidyverse)
library(ggplot2)
library(readxl)
library(glmnet)
library(mpath)
library(reshape2)
library(gridExtra)
library(leaps)
library(bestsubset)
source("modeling.function.R")
load("BASES_CENSO_UPA_spss/clean_data.RData")
vars <-  read_excel("Variables.xlsx", sheet = "vars", range = "C2:I241")
netincome_include <- vars[which(is.na(vars$`Net Income`)),1]$`Variable Name`
full_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = netincome))
reduced_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = netincome)) +
scale_x_continuous(limits = c(-5e+04, 5e+04))
pdf("Paper/images/netincome_histograms.pdf",width=12,height=8)
grid.arrange(full_hist, reduced_hist, nrow = 1)
dev.off()
netincome_x.df <- subset(reduced_data[abs(reduced_data$netincome) < 5e+04,], select = netincome_include)
netincome <- reduced_data[abs(reduced_data$netincome) < 5e+04, 'netincome']
netincome.models <- fit.models(model.name = "netincome", x.data = netincome_x.df,
y.response = netincome, response.family = "gaussian")
setwd("/Users/michaelbostwick/Documents/Galapagos")
library(tidyverse)
library(ggplot2)
library(readxl)
library(glmnet)
library(mpath)
library(reshape2)
library(gridExtra)
library(leaps)
library(bestsubset)
source("modeling.function.R")
load("BASES_CENSO_UPA_spss/clean_data.RData")
vars <-  read_excel("Variables.xlsx", sheet = "vars", range = "C2:I241")
netincome_include <- vars[which(is.na(vars$`Net Income`)),1]$`Variable Name`
full_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = netincome))
reduced_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = netincome)) +
scale_x_continuous(limits = c(-5e+04, 5e+04))
pdf("Paper/images/netincome_histograms.pdf",width=12,height=8)
grid.arrange(full_hist, reduced_hist, nrow = 1)
dev.off()
netincome_x.df <- subset(reduced_data[abs(reduced_data$netincome) < 5e+04,], select = netincome_include)
netincome <- reduced_data[abs(reduced_data$netincome) < 5e+04, 'netincome']
netincome.models <- fit.models(model.name = "netincome", x.data = netincome_x.df,
y.response = netincome, response.family = "gaussian")
setwd("/Users/michaelbostwick/Documents/Galapagos")
library(tidyverse)
library(ggplot2)
library(readxl)
library(glmnet)
library(mpath)
library(reshape2)
library(gridExtra)
library(leaps)
library(bestsubset)
source("modeling.function.R")
load("BASES_CENSO_UPA_spss/clean_data.RData")
vars <-  read_excel("Variables.xlsx", sheet = "vars", range = "C2:I241")
netincome_include <- vars[which(is.na(vars$`Net Income`)),1]$`Variable Name`
full_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = netincome))
reduced_hist <- ggplot(data = reduced_data) + geom_histogram(mapping = aes(x = netincome)) +
scale_x_continuous(limits = c(-5e+04, 5e+04))
pdf("Paper/images/netincome_histograms.pdf",width=12,height=8)
grid.arrange(full_hist, reduced_hist, nrow = 1)
dev.off()
netincome_x.df <- subset(reduced_data[abs(reduced_data$netincome) < 5e+04,], select = netincome_include)
netincome <- reduced_data[abs(reduced_data$netincome) < 5e+04, 'netincome']
netincome.models <- fit.models(model.name = "netincome", x.data = netincome_x.df,
y.response = netincome, response.family = "gaussian")
setwd("/Users/michaelbostwick/Documents/Galapagos")
library(tidyverse)
library(ggplot2)
library(readxl)
library(glmnet)
library(mpath)
library(reshape2)
library(gridExtra)
library(leaps)
library(bestsubset)
library(bestglm)
source("modeling.function.R")
load("BASES_CENSO_UPA_spss/clean_data.RData")
vars <-  read_excel("Variables.xlsx", sheet = "vars", range = "C2:I241")
workers_include <- vars[which(is.na(vars$`Number workers supported`)),1]$`Variable Name`
workers_nonzero <- reduced_data[reduced_data$fulltimework > 0, 'fulltimework']
reduced_data$workers_binary <- (reduced_data$fulltimework > 0)*1
workers_x.df <- subset(reduced_data, select = workers_include)
x.data <- workers_x.df
y.response <- reduced_data$workers_binary
response.family <- "binomial"
x.matrix <- model.matrix(~., x.data)[,-1]
?glm
fwd.data <- cbind(x.data,y.response)
View(fwd.data)
fwd.data$y.response
fwd.data <- cbind(x.data,y.response)
model.null = glm(y.response ~ 1, data=fwd.data, family = binomial(link="logit"))
summary(model.null)
model.full = glm(y.response ~ ., data=fwd.data, family = binomial(link="logit"))
summary(model.full)
?step
fwd.steps <- step(model.null,scope = list(upper=model.full), direction="forward", data=fwd.data)
fwd.steps <- step(model.null,scope = list(upper=model.full), direction="forward", data=fwd.data, trace = -1)
fwd.steps <- step(model.null,scope = list(upper=model.full), direction="forward", data=fwd.data, trace = 0)
warnings()
str(fwd.steps)
