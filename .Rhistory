maxlen <- max(sapply(l,length))
data.frame(lapply(l,na.pad,len=maxlen),...)
}
analysis.df <- makePaddedDataFrame(reps)
colnames(analysis.df) <- c(seq(1:n.reps))
analysis.df$avg <- rowMeans(analysis.df)
plot(analysis.df$avg, type='l')
plot(rollmean(analysis.df$avg, 200), type="l")
plot(rollmean(analysis.df$avg, 300), type="l")
plot(rollmean(analysis.df$avg, 500), type="l")
plot(rollmean(analysis.df$avg, 500), type="l", ylim = c(0,160))
plot(rollmean(analysis.df$avg, 1000), type="l", ylim = c(0,160))
time_in_system <- read.table("~/Documents/STOR_672/arena_files/HW2-17-Solution/time_in_system20r100k.txt", sep =" ", header=FALSE)
time_in_system <- read.table("~/Documents/STOR_672/arena_files/HW2-17-Solution/time_in_system20r100k.txt", sep =" ", header=FALSE)
time_in_system <- rbind(c(0,0),time_in_system)
n.reps <- 20
reps <- vector(mode="list", length=n.reps)
for (i in 1:n.reps){
reps[[i]] <- time_in_system$V2[(which(time_in_system$V1 == -(i-1))+1):(which(time_in_system$V1 == -i)-1)]
}
na.pad <- function(x,len){
x[1:len]
}
makePaddedDataFrame <- function(l,...){
maxlen <- max(sapply(l,length))
data.frame(lapply(l,na.pad,len=maxlen),...)
}
analysis.df <- makePaddedDataFrame(reps)
colnames(analysis.df) <- c(seq(1:n.reps))
analysis.df$avg <- rowMeans(analysis.df)
plot(analysis.df$avg, type='l')
plot(rollmean(analysis.df$avg, 100), type="l", ylim = c(0,160))
plot(rollmean(analysis.df$avg, 100), type="l", ylim = c(0,200))
plot(rollmean(analysis.df$avg, 100), type="l", ylim = c(0,210))
plot(rollmean(analysis.df$avg, 100), type="l", ylim = c(0,250))
plot(rollmean(analysis.df$avg, 500), type="l", ylim = c(0,250))
plot(rollmean(analysis.df$avg, 100), type="l", ylim = c(0,250))
plot(rollmean(analysis.df$avg, 1000), type="l", ylim = c(0,250))
plot(rollmean(analysis.df$avg, 2000), type="l", ylim = c(0,250))
analysis.df$avg <- rowMeans(analysis.df[,1:10])
plot(analysis.df$avg, type='l')
plot(rollmean(analysis.df$avg, 2000), type="l", ylim = c(0,250))
time_in_system <- read.table("~/Documents/STOR_672/arena_files/HW2-17-Solution/time_in_system10r300k.txt", sep =" ", header=FALSE)
time_in_system <- read.table("~/Documents/STOR_672/arena_files/HW2-17-Solution/time_in_system10r300k.txt", sep =" ", header=FALSE)
time_in_system <- rbind(c(0,0),time_in_system)
n.reps <- 10
reps <- vector(mode="list", length=n.reps)
for (i in 1:n.reps){
reps[[i]] <- time_in_system$V2[(which(time_in_system$V1 == -(i-1))+1):(which(time_in_system$V1 == -i)-1)]
}
na.pad <- function(x,len){
x[1:len]
}
makePaddedDataFrame <- function(l,...){
maxlen <- max(sapply(l,length))
data.frame(lapply(l,na.pad,len=maxlen),...)
}
analysis.df <- makePaddedDataFrame(reps)
colnames(analysis.df) <- c(seq(1:n.reps))
analysis.df$avg <- rowMeans(analysis.df[,1:10])
plot(analysis.df$avg, type='l')
plot(rollmean(analysis.df$avg, 2000), type="l", ylim = c(0,250))
plot(rollmean(analysis.df$avg, 5000), type="l", ylim = c(0,250))
plot(rollmean(analysis.df$avg, 1000), type="l", ylim = c(0,250))
analysis.df$avg <- rowMeans(analysis.df)
plot(analysis.df$avg, type='l')
plot(rollmean(analysis.df$avg, 1000), type="l", ylim = c(0,250))
plot(rollmean(analysis.df$avg, 10000), type="l", ylim = c(0,250))
plot(rollmean(analysis.df$avg, 6000), type="l", ylim = c(0,250))
plot(analysis.df$avg, type='l')
plot(rollmean(analysis.df$avg, 6000), type="l", ylim = c(0,250))
time_in_system[30000,V1]
plot(rollmean(analysis.df$avg[1:20000], 6000), type="l", ylim = c(0,250))
plot(analysis.df$avg[1:2000], type='l')
plot(analysis.df$avg[1:20000], type='l')
time_in_system <- read.table("~/Documents/STOR_672/arena_files/HW2-17-Solution/time_in_system10r300k.txt", sep =" ", header=FALSE)
time_in_system <- rbind(c(0,0),time_in_system)
n.reps <- 10
reps <- vector(mode="list", length=n.reps)
for (i in 1:n.reps){
reps[[i]] <- time_in_system$V2[(which(time_in_system$V1 == -(i-1))+1):(which(time_in_system$V1 == -i)-1)]
}
na.pad <- function(x,len){
x[1:len]
}
makePaddedDataFrame <- function(l,...){
maxlen <- max(sapply(l,length))
data.frame(lapply(l,na.pad,len=maxlen),...)
}
analysis.df <- makePaddedDataFrame(reps)
colnames(analysis.df) <- c(seq(1:n.reps))
analysis.df$avg <- rowMeans(analysis.df)
plot(analysis.df$avg, type='l')
plot(rollmean(analysis.df$avg, 6000), type="l", ylim = c(0,250))
library(zoo)
plot(rollmean(analysis.df$avg, 6000), type="l", ylim = c(0,250))
?zoo
install.packages("pracma")
library(pracma)
?pracma
View(analysis.df)
?rollmean
?movavg
View(tril)
plot(movavg(analysis.df$avg, 6000, type="s"), ylim = c(0,250))
plot(movavg(analysis.df$avg, 10000, type="s"), ylim = c(0,250))
plot(movavg(analysis.df$avg, 10000, type="s"), type = "l", ylim = c(0,250))
plot(movavg(analysis.df$avg, 100, type="s"), type = "l", ylim = c(0,250))
plot(movavg(analysis.df$avg, 1000, type="s"), type = "l", ylim = c(0,250))
plot(movavg(analysis.df$avg, 10000, type="s"), type = "l", ylim = c(0,250))
par(mfrow = c(2,2))
plot(analysis.df$avg, type='l')
plot(analysis.df$avg, type='l', title = "10,000 minutes, no moving average")
?plot
plot(analysis.df$avg, type='l', main = "10,000 minutes, no moving average")
plot(analysis.df$avg, type='l', main = "10,000 minutes, no MA")
100000*3
warnings()
plot(analysis.df$avg[1:2000], type='l', main = "10,000 minutes, no MA")
plot(analysis.df$avg, type='l', main = "300,000 minutes, no MA")
plot(analysis.df$avg[1:2000], type='l', main = "10k minutes, no MA")
plot(analysis.df$avg[1:2000], type='l', main = "10k minutes, no MA")
plot(analysis.df$avg[1:2000], type='l', main = "10k minutes, no MA")
plot(analysis.df$avg, type='l', main = "300k minutes, no MA")
plot(movavg(analysis.df$avg, 100, type="s"), type = "l", ylim = c(0,250), main = "300k min, 100 size window")
plot(movavg(analysis.df$avg, 10000, type="s"), type = "l", ylim = c(0,250), main = "300k min, 10k size window")
View(analysis.df)
length(analysis.df$`1`)
length(analysis.df$`2`)
apply(analysis.df, 2, function(x) length(which(!is.na(x))))
mean(apply(analysis.df, 2, function(x) length(which(!is.na(x))))[1:10])
300000 / mean(apply(analysis.df, 2, function(x) length(which(!is.na(x))))[1:10])
50000*5
time_in_system <- read.table("~/Documents/STOR_672/arena_files/HW2-17-Solution/output_hw3d.txt", sep =" ", header=FALSE)
time_in_system <- rbind(c(0,0),time_in_system)
n.reps <- 20
reps <- vector(mode="list", length=n.reps)
for (i in 1:n.reps){
reps[[i]] <- time_in_system$V2[(which(time_in_system$V1 == -(i-1))+1):(which(time_in_system$V1 == -i)-1)]
}
View(reps)
na.pad <- function(x,len){
x[1:len]
}
makePaddedDataFrame <- function(l,...){
maxlen <- max(sapply(l,length))
data.frame(lapply(l,na.pad,len=maxlen),...)
}
analysis.df <- makePaddedDataFrame(reps)
View(analysis.df)
View(reps)
reps.df <- data.frame(reps)
View(reps.df)
reps.df <- t(data.frame(reps))
View(reps.df)
colnames(reps.df) <- c(seq(1:n.reps))
reps.df <- data.frame(reps)
colnames(reps.df) <- c(seq(1:n.reps))
View(reps.df)
reps.df <- t(reps.df)
View(reps.df)
reps.df <- matrix(reps)
colnames(reps.df) <- c(seq(1:n.reps))
data.frame
reps.df <- data.frame(reps)
colnames(reps.df) <- c(seq(1:n.reps))
reps.df <- t(reps.df)
View(reps.df)
library(zoo)
rollmean
methods(rollmean)
getAnywhere(rollmean)
getAnywhere(rollmean, rollmean)
getMethod(rollmean, rollmean)
getMethod(rollmean)
showMethods(rollmean)
reps.df <- data.frame(reps)
colnames(reps.df) <- c(seq(1:n.reps))
reps.df <- t(reps.df)
View(reps.df)
reps.df <- sort(t(reps.df))
reps.df <- data.frame(reps)
colnames(reps.df) <- c(seq(1:n.reps))
reps.df <- sort(t(reps.df))
reps.df
reps.df[10]
qnorm(0.95)
11 - qnorm(0.95)*sqrt(5)
11 + qnorm(0.95)*sqrt(5)
floor(11 - qnorm(0.95)*sqrt(5))
reps.df[floor(11 - qnorm(0.95)*sqrt(5))]
reps.df[ceiling(11 + qnorm(0.95)*sqrt(5))]
.1**0.5
0.3162278**2
.1**0.01
toy <- rbind(c(3,4,"R"),
c(2,2,"R"),
c(4,4,"R"),
c(1,4,"R"),
c(2,1,"B"),
c(4,3,"B"),
c(4,1,"B"))
View(toy)
colnames(toy) <- c("X1", "X2", Y)
colnames(toy) <- c("X1", "X2", "Y")
View(toy)
plot(toy)
plot(toy, col = toy$Y)
toy <- data.frame(rbind(c(3,4,"R"),
c(2,2,"R"),
c(4,4,"R"),
c(1,4,"R"),
c(2,1,"B"),
c(4,3,"B"),
c(4,1,"B")))
colnames(toy) <- c("X1", "X2", "Y")
View(toy)
plot(toy$X1, toy$X2, col = toy$Y)
plot(toy$X1, toy$X2, color = toy$Y)
plot(toy$X1, toy$X2)
plot(toy$X1, toy$X2)
View(toy)
plot(toy$X1)
View(toy)
str(toy)
toy$X1 <- as.numeric(toy$X1)
str(toy)
toy$X2 <- as.numeric(toy$X2)
plot(toy$X1, toy$X2)
plot(toy$X1, toy$X2, col = toy$Y)
library(e1071)
install.packages("e1071")
svmfit=svm(Y~., data=toy, kernel="linear", cost=1,scale=FALSE)
library(e1071)
svmfit=svm(Y~., data=toy, kernel="linear", cost=1,scale=FALSE)
summary(svmfit)
plot(svmfit, toy)
svmfit=svm(Y~., data=toy, kernel="linear", cost=10,scale=FALSE)
summary(svmfit)
plot(svmfit, toy)
svmfit=svm(Y~., data=toy, kernel="linear", cost=Inf,scale=FALSE)
svmfit=svm(Y~., data=toy, kernel="linear", cost=99999999,scale=FALSE)
plot(svmfit, toy)
svmfit=svm(Y~., data=toy, kernel="linear", cost=999,scale=FALSE)
plot(svmfit, toy)
svmfit$coef0
svmfit$coefs
time_in_system <- read.table("~/Documents/STOR_672/arena_files/HW2-17-Solution/output_hw3d.txt", sep =" ", header=FALSE)
time_in_system <- rbind(c(0,0),time_in_system)
n.reps <- 20
reps <- vector(mode="list", length=n.reps)
for (i in 1:n.reps){
reps[[i]] <- time_in_system$V2[(which(time_in_system$V1 == -(i-1))+1):(which(time_in_system$V1 == -i)-1)]
}
reps.df <- data.frame(reps)
colnames(reps.df) <- c(seq(1:n.reps))
reps.df <- sort(t(reps.df))
reps.df[10]
reps.df[floor(11 - qnorm(0.95)*sqrt(5))]
reps.df[ceiling(11 + qnorm(0.95)*sqrt(5))]
setwd("/Users/michaelbostwick/Documents/Galapagos")
library(tidyverse)
library(ggplot2)
library(readxl)
library(glmnet)
library(mpath)
library(reshape2)
library(gridExtra)
library(leaps)
library(bestsubset)
source("modeling.function.R")
load("BASES_CENSO_UPA_spss/clean_data.RData")
vars <-  read_excel("Variables.xlsx", sheet = "vars", range = "C2:I241")
invasive_include <- vars[which(is.na(vars$`Surface area with invasive species`)),1]$`Variable Name`
invasive_x.df <- subset(reduced_data, select = invasive_include)
setwd("/Users/michaelbostwick/Documents/Galapagos")
library(tidyverse)
library(ggplot2)
library(readxl)
library(glmnet)
library(mpath)
library(reshape2)
library(gridExtra)
library(leaps)
library(bestsubset)
source("modeling.function.R")
load("BASES_CENSO_UPA_spss/clean_data.RData")
vars <-  read_excel("Variables.xlsx", sheet = "vars", range = "C2:I241")
production_include <- vars[which(is.na(vars$`UPA Production`)),1]$`Variable Name`
production_x.df <- subset(reduced_data[reduced_data$productivity > 0,], select = production_include)
log_productivity <- log10(reduced_data[reduced_data$productivity > 0, 'productivity'])
model.name <- "production"
x.data <- production_x.df
y.response <- log_productivity
response.family <- "gaussian"
x.matrix <- model.matrix(~., x.data)[,-1]
# Elastic net modeling
set.seed(1)
foldid=sample(1:10,size=length(y.response),replace=TRUE)
if (response.family == "gaussian"){
cv1=cv.glmnet(x.matrix,y.response,family=response.family,foldid=foldid,alpha=1)
cv.75=cv.glmnet(x.matrix,y.response,family=response.family,foldid=foldid,alpha=0.75)
cv.5=cv.glmnet(x.matrix,y.response,family=response.family,foldid=foldid,alpha=.5)
cv.25=cv.glmnet(x.matrix,y.response,family=response.family,foldid=foldid,alpha=0.25)
}
models <- vector(mode="list", length=4)
models[[1]] <- cv.25
models[[2]] <- cv.5
models[[3]] <- cv.75
models[[4]] <- cv1
alphas <- c(0.25,0.5,0.75,1)
cv1.mse <- cv1$cvm[cv1$lambda == cv1$lambda.1se]
cv.75.mse <- cv.75$cvm[cv.75$lambda == cv.75$lambda.1se]
cv.5.mse <- cv.5$cvm[cv.5$lambda == cv.5$lambda.1se]
cv.25.mse <- cv.25$cvm[cv.25$lambda == cv.25$lambda.1se]
mses <- c(cv.25.mse, cv.5.mse, cv.75.mse, cv1.mse)
best_model <- models[[which.min(mses)]]
best_alpha <- alphas[which.min(mses)]
elastic.full <- glmnet(x.matrix,y.response,family=response.family,alpha=best_alpha)
found_df = FALSE
df = 5
elastic5.cvm <- best_model$cvm[best_model$df == df][1]
elastic5.cvm
best_model$df
best_model$glmnet.fit$df
best_model$cvm
found_df = FALSE
df = 5
while (found_df == FALSE){
if (length(best_model$cvm[best_model$glmnet.fit$df == df]) > 0){
elastic5.cvm <- best_model$cvm[best_model$glmnet.fit$df == df]
found_df = TRUE
} else {
df = df + 1
}
}
elastic5.cvm
if (best_model$lambda.1se == best_model$lambda[1]){
best.lambda = best_model$lambda.min
} else {
best.lambda = best_model$lambda.1se
}
best_model$cvm
best_model$lambda
best_model$lambda = best.lambda
if (best_model$lambda.1se == best_model$lambda[1]){
best.lambda = best_model$lambda.min
} else {
best.lambda = best_model$lambda.1se
}
best_model$lambda
if (response.family == "gaussian"){
cv1=cv.glmnet(x.matrix,y.response,family=response.family,foldid=foldid,alpha=1)
cv.75=cv.glmnet(x.matrix,y.response,family=response.family,foldid=foldid,alpha=0.75)
cv.5=cv.glmnet(x.matrix,y.response,family=response.family,foldid=foldid,alpha=.5)
cv.25=cv.glmnet(x.matrix,y.response,family=response.family,foldid=foldid,alpha=0.25)
}
models <- vector(mode="list", length=4)
models[[1]] <- cv.25
models[[2]] <- cv.5
models[[3]] <- cv.75
models[[4]] <- cv1
alphas <- c(0.25,0.5,0.75,1)
cv1.mse <- cv1$cvm[cv1$lambda == cv1$lambda.1se]
cv.75.mse <- cv.75$cvm[cv.75$lambda == cv.75$lambda.1se]
cv.5.mse <- cv.5$cvm[cv.5$lambda == cv.5$lambda.1se]
cv.25.mse <- cv.25$cvm[cv.25$lambda == cv.25$lambda.1se]
mses <- c(cv.25.mse, cv.5.mse, cv.75.mse, cv1.mse)
best_model <- models[[which.min(mses)]]
best_alpha <- alphas[which.min(mses)]
elastic.full <- glmnet(x.matrix,y.response,family=response.family,alpha=best_alpha)
elastic.full.cvm <- best_model$cvm[best_model$lambda == best.lambda]
elastic.full.cvm
best.fwd <- regsubsets(y.response~., data=x.data ,nvmax=min(100,nrow(x.data)),method = "forward")
best.fwd.summary <- summary(best.fwd)
fwd.coefs <- coef(best.fwd, which.min(best.fwd.summary$bic))
incl_vars <- names(fwd.coefs)[-1]
incl_x <- x.matrix[,incl_vars]
fwd.predicts <- incl_x %*% fwd.coefs[-1] + fwd.coefs[1]
fwd.resids <- (y.response - fwd.predicts)
fwd.coefs5 <- colnames(x.matrix)[best.fwd$vorder[1:5]]
xdata.5 <- as.data.frame(x.matrix[,fwd.coefs5])
fwd.fit5 <- lm(y.response ~ ., data = xdata.5)
fwd.coefs5.signs <- lapply(coef(fwd.fit5)[-1], sign_check)
fwd5.r2 <- best.fwd.summary$rsq[5]
fwd5.r2
best.fwd.summary$rsq
which.min(best.fwd.summary$bic)
fwd.full.r2 <- best.fwd.summary$rsq[which.min(best.fwd.summary$bic)]
fwd.full.r2
elastic5.cvm
fwd5.r2
elastic.full.cvm
fwd.full.r2
setwd("/Users/michaelbostwick/Documents/Galapagos")
library(tidyverse)
library(ggplot2)
library(readxl)
library(glmnet)
library(mpath)
library(reshape2)
library(gridExtra)
library(leaps)
library(bestsubset)
source("modeling.function.R")
load("BASES_CENSO_UPA_spss/clean_data.RData")
vars <-  read_excel("Variables.xlsx", sheet = "vars", range = "C2:I241")
netincome_include <- vars[which(is.na(vars$`Net Income`)),1]$`Variable Name`
netincome_x.df <- subset(reduced_data[abs(reduced_data$netincome) < sd(reduced_data$netincome),], select = netincome_include)
netincome <- reduced_data[abs(reduced_data$netincome) < sd(reduced_data$netincome), 'netincome']
netincome.matrix <- model.matrix(~., netincome_x.df)[,-1]
col_vars <- apply(netincome.matrix, 2, var)
zero_variance <- names(col_vars[col_vars == 0])
netincome_x.nonzero <- netincome.matrix[,!colnames(netincome.matrix) %in% zero_variance]
netincome.models <- fit.models(model.name = "netincome", x.data = as.data.frame(netincome_x.nonzero),
y.response = netincome, response.family = "gaussian")
netincome.models
33273336**0.5
0.37**0.5
0.61**.5
33273336**0.5
33528174**0.5
?step
setwd("/Users/michaelbostwick/Documents/Galapagos")
library(tidyverse)
library(ggplot2)
library(readxl)
library(glmnet)
library(mpath)
library(reshape2)
library(gridExtra)
library(leaps)
library(bestsubset)
library(bestglm)
source("modeling.function.R")
load("BASES_CENSO_UPA_spss/clean_data.RData")
vars <-  read_excel("Variables.xlsx", sheet = "vars", range = "C2:I241")
workers_include <- vars[which(is.na(vars$`Number workers supported`)),1]$`Variable Name`
workers_nonzero <- reduced_data[reduced_data$fulltimework > 0, 'fulltimework']
reduced_data$workers_binary <- factor(reduced_data$fulltimework > 0)
workers_x.df <- subset(reduced_data, select = workers_include)
levels(reduced_data$workers_binary) = c("Zero", "Positive")
worker_binary.models <- fit.models(model.name = "workers_binary", x.data = workers_x.df,
y.response = reduced_data$workers_binary, response.family = "binomial")
worker_binary.models
warnings()
worker_binary.models <- fit.models(model.name = "workers_binary", x.data = workers_x.df,
y.response = reduced_data$workers_binary, response.family = "binomial")
worker_binary.models
source("modeling.function.R")
worker_binary.models <- fit.models(model.name = "workers_binary", x.data = workers_x.df,
y.response = reduced_data$workers_binary, response.family = "binomial")
worker_binary.models
model.name <- "workers_binary"
x.data <- workers_x.df
y.response <- reduced_data$workers_binary
response.family <- "binomial"
x.matrix <- model.matrix(~., x.data)[,-1]
fwd.data <- cbind(x.data,y.response)
model.null = glm(y.response ~ 1, data=fwd.data, family = binomial(link="logit"))
model.full = glm(y.response ~ ., data=fwd.data, family = binomial(link="logit"))
fwd.steps <- step(model.null,scope = list(upper=model.full), direction="forward", data=fwd.data,
k = log(nrow(fwd.data)), trace = 0)
plot(fwd.steps$anova$AIC, type= "l", ylab = "BIC", xlab = "Number of Variables")
points(which.min(fwd.steps$anova$AIC),min(fwd.steps$anova$AIC),col="red",cex=2,pch=20)
fwd.coefs5 <- names(fwd.steps$coefficients)[2:6]
fwd.coefs5.signs <- lapply(fwd.steps$coefficients[2:6], sign_check)
fwd.coefs <- fwd.steps$coefficients
fwd.predicted <- 1*(fwd.steps$fitted.values < 0.5)
fwd.predicted
fwd.correct <- (fwd.predicted == y.response)
fwd.correct[1:10]
fwd.predicted <- 1*(fwd.steps$fitted.values > 0.5)
fwd.correct <- (fwd.predicted == y.response)
fwd.correct[1:10]
fwd.steps$fitted.values[1:10]
y.response[1:10]
fwd.steps$y
fwd.predicted <- 1*(fwd.steps$fitted.values > 0.5)
fwd.correct <- (fwd.predicted == fwd.steps$y)
fwd.correct[1:10]
fwd.steps5 <- step(model.null,scope = list(upper=model.full), direction="forward", data=fwd.data,
k = log(nrow(fwd.data)), steps = 5, trace = 0)
View(fwd.steps5)
fwd.steps5$anova
fwd5.r2 <- mean(1*(fwd.steps5$fitted.values < 0.5) == fwd.steps5$y)
fwd5.r2 <- mean(1*(fwd.steps5$fitted.values > 0.5) == fwd.steps5$y)
fwd.predicted <- 1*(fwd.steps$fitted.values > 0.5)
fwd.full.r2 <- mean(fwd.correct)
fwd5.r2 <- mean(1*(fwd.steps5$fitted.values > 0.5) == fwd.steps5$y)
fwd.plot <- data.frame(cbind(fwd.steps$fitted.values, fwd.predicted, fwd.correct))
colnames(fwd.plot) <- c("Predicted Probability", "Predicted", "Correct")
path <- sprintf("Paper/images/binarypreds_%s.pdf", model.name)
ggplot(fwd.plot, aes(`Predicted Probability`, factor(Predicted))) + geom_point(aes(colour = factor(fwd.correct)))
workers_x.nonzero.pre <- subset(reduced_data[reduced_data$fulltimework > 0,], select = workers_include)
num_workers_log <- log10(reduced_data[reduced_data$fulltimework > 0, 'fulltimework'])
workers.matrix <- model.matrix(~., workers_x.nonzero.pre)[,-1]
col_vars <- apply(workers.matrix, 2, var)
zero_variance <- names(col_vars[col_vars == 0])
workers_x.nonzero <- workers.matrix[,!colnames(workers.matrix) %in% zero_variance]
remove_vars <- c("ga15_cualLLANTAS", "`ENERGIA_ELENERGIA SOLAR PUBLICA`", "`ENERGIA_ELGENERADOR PRIVADO`")
workers_x.nonzero <- as.data.frame(workers_x.nonzero[,!colnames(workers_x.nonzero) %in% remove_vars])
worker_binary.models
fwd5.r2
fwd.full.r2
worker_nonzero.models <- fit.models(model.name = "workers_nonzero", x.data = workers_x.nonzero,
y.response = num_workers_log, response.family = "gaussian")
1 - 0.7364238
worker_nonzero.models
0.2129575**0.5
0.2088308**0.5
1- 0.7403974
